#ifndef IGL_OCULUSVR_H
#define IGL_OCULUS_H


#include <thread>
#include <atomic>
#include <igl/igl_inline.h>
#include <Eigen/Geometry>
#include "Extras/OVR_Math.h"

namespace igl{
	namespace opengl{
		class OculusVR{
public:
			IGL_INLINE void init();
			IGL_INLINE bool init_VR_buffers(int window_width, int window_height);
			IGL_INLINE void on_render_start();
			IGL_INLINE int eyeTextureWidth();
			IGL_INLINE int eyeTextureHeight();


private:

// A buffer struct used to store eye textures and framebuffers.
			// We create one instance for the left eye, one for the right eye.
			// Final rendering is done via blitting two separate frame buffers into one render target.
			struct OVR_buffer {
				IGL_INLINE OVR_buffer(const ovrSession &session, int eyeIdx);
				IGL_INLINE void OnRender();
				IGL_INLINE void OnRenderFinish();

				ovrSizei   eyeTextureSize;
				GLuint     eyeFbo = 0;
				GLuint     eyeTexId = 0;
				GLuint     depthBuffer = 0;

				ovrTextureSwapChain swapTextureChain = nullptr;
			};

			OVR_buffer *eye_buffers[2];
		};
	}
}
#ifndef IGL_STATIC_LIBRARY
#include "OculusVR.cpp"
#endif

#endif